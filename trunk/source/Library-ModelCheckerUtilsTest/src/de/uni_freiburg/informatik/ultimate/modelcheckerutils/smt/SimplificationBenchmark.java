/*
 * Copyright (C) 2017 Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
 * Copyright (C) 2017 University of Freiburg
 *
 * This file is part of the ULTIMATE ModelCheckerUtilsTest Library.
 *
 * The ULTIMATE ModelCheckerUtilsTest Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The ULTIMATE ModelCheckerUtilsTest Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE ModelCheckerUtilsTest Library. If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE ModelCheckerUtilsTest Library, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP),
 * containing parts covered by the terms of the Eclipse Public License, the
 * licensors of the ULTIMATE ModelCheckerUtilsTest Library grant you additional permission
 * to convey the resulting work.
 */
package de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt;

import java.io.IOException;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import de.uni_freiburg.informatik.ultimate.core.model.services.ILogger;
import de.uni_freiburg.informatik.ultimate.core.model.services.ILogger.LogLevel;
import de.uni_freiburg.informatik.ultimate.core.model.services.IUltimateServiceProvider;
import de.uni_freiburg.informatik.ultimate.lib.modelcheckerutils.smt.scripttransfer.HistoryRecordingScript;
import de.uni_freiburg.informatik.ultimate.lib.smtlibutils.ManagedScript;
import de.uni_freiburg.informatik.ultimate.lib.smtlibutils.SmtSortUtils;
import de.uni_freiburg.informatik.ultimate.lib.smtlibutils.SmtUtils.SimplificationTechnique;
import de.uni_freiburg.informatik.ultimate.logic.LoggingScript;
import de.uni_freiburg.informatik.ultimate.logic.Logics;
import de.uni_freiburg.informatik.ultimate.logic.Script;
import de.uni_freiburg.informatik.ultimate.test.mocks.UltimateMocks;

/**
 *
 * @author Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
 *
 */
public class SimplificationBenchmark {

	/**
	 * Warning: each test will overwrite the SMT script of the preceding test.
	 */
	private static final boolean WRITE_SMT_SCRIPTS_TO_FILE = false;
	private static final boolean WRITE_BENCHMARK_RESULTS_TO_WORKING_DIRECTORY = !false;
	private static final long TEST_TIMEOUT_MILLISECONDS = 20_000;
	private static final LogLevel LOG_LEVEL = LogLevel.INFO;
//	private static final String SOLVER_COMMAND = "cvc4 --incremental --lang smt";
	private static final String SOLVER_COMMAND = "z3 SMTLIB2_COMPLIANT=true -t:12000 -memory:2024 -smt2 -in";
//	private static final String SOLVER_COMMAND = "INTERNAL_SMTINTERPOL:10000";

	private static final SimplificationTechnique SIMPLIFICATION_TECHNIQUE = SimplificationTechnique.SIMPLIFY_DDA;

	private IUltimateServiceProvider mServices;
	private Script mScript;
	private ManagedScript mMgdScript;
	private ILogger mLogger;
	private static QuantifierEliminationTestCsvWriter mCsvWriter;

	@BeforeClass
	public static void beforeAllTests() {
		mCsvWriter = new QuantifierEliminationTestCsvWriter(SimplificationBenchmark.class.getSimpleName());
	}

	@AfterClass
	public static void afterAllTests() {
		if (WRITE_BENCHMARK_RESULTS_TO_WORKING_DIRECTORY) {
			try {
				mCsvWriter.writeCsv();
			} catch (final IOException e) {
				throw new AssertionError(e);
			}
		}
	}

	@Before
	public void setUp() throws IOException {
		mServices = UltimateMocks.createUltimateServiceProviderMock(LOG_LEVEL);
		mServices.getProgressMonitorService().setDeadline(System.currentTimeMillis() + TEST_TIMEOUT_MILLISECONDS);
		mLogger = mServices.getLoggingService().getLogger("lol");

		final Script solverInstance = new HistoryRecordingScript(UltimateMocks.createSolver(SOLVER_COMMAND, LOG_LEVEL));
		if (WRITE_SMT_SCRIPTS_TO_FILE) {
			mScript = new LoggingScript(solverInstance, "SimplificationTest.smt2", true);
		} else {
			mScript = solverInstance;
		}

		mMgdScript = new ManagedScript(mServices, mScript);
		mScript.setLogic(Logics.ALL);
	}

	@After
	public void tearDown() {
		mScript.exit();
		mCsvWriter.reportTestFinished();
	}

	@Test
	public void benchmark01() {
		final FunDecl[] funDecls = new FunDecl[] {
			new FunDecl(SmtSortUtils::getIntSort, "v_y_3", "v", "m", "n"),
		};
		final String formulaAsString = "(and (<= n (+ (* (div (+ (* m (- 1)) 255) 256) 256) (* v_y_3 512) 127 (* v 256))) (<= 0 (+ v (div (+ (* m (- 1)) 127) 256) (* v_y_3 3) 1)) (<= n (+ (* 128 (div (+ (* m (- 1)) 127) 256)) 127)) (<= (+ n (* v 512)) (+ (* 256 (div (+ (* m (- 1)) 127) 256)) 127)) (<= n (+ (* v_y_3 768) 255 (* (div (+ (* m (- 1)) 255) 256) 256) (* v 768))) (<= 0 (+ (* v_y_3 2) (div (+ (* m (- 1)) 127) 128))) (<= (+ (* 256 v_y_3) n (* v 256)) (+ (* 256 (div (+ (* m (- 1)) 127) 256)) 127)) (<= (+ (* 256 v_y_3) n (* v 256)) 511) (<= n (+ (* 256 v_y_3) 255)) (<= 0 (+ v v_y_3 (div (+ (* m (- 1)) 127) 256))) (<= 0 (+ (div (+ (* m (- 1)) 255) 256) (* v 2) (* v_y_3 2))) (<= (+ n (* v 512)) (+ (* 128 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* 128 (div (+ (* m (- 1)) 127) 256)) (* v_y_3 128) 127 (* v 128))) (<= v_y_3 0) (<= (+ (* 256 v_y_3) (* v 1024) n) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* v_y_3 512) (* 256 (div (+ (* m (- 1)) 127) 128)) 127 (* v 512))) (<= (+ m (* v 256)) 127) (<= 0 (div (+ (* m (- 1)) 127) 256)) (<= n (+ 255 (* v 256))) (<= 0 (+ (* v 3) (* v_y_3 2) 1)) (<= (+ (* v_y_3 512) n) 383) (<= n (+ (* 256 v_y_3) 383 (* v 256))) (<= (+ n (* v 256)) (+ (* 256 v_y_3) 255)) (<= (+ n (* v 256)) (+ (* 128 (div (+ (* m (- 1)) 127) 128)) 127)) (<= 0 (+ (* v_y_3 2) (div (+ (* m (- 1)) 127) 256) 1)) (<= n (+ 383 (* v 256))) (<= n (+ (* v_y_3 512) (* v 1024) 639)) (<= n (+ (* 256 v_y_3) 255 (* v 256))) (<= (+ (* 256 v_y_3) n (* v 768)) (+ (* 128 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ 383 (* v_y_3 512) (* v 256))) (<= n (+ (* (div (+ (* m (- 1)) 255) 256) 256) (* v_y_3 512) 127)) (<= n (+ (* v_y_3 768) 255 (* (div (+ (* m (- 1)) 255) 256) 256) (* v 256))) (<= 0 v) (<= (+ n (* v 256)) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* v_y_3 768) (* 1280 v) 767)) (<= n (+ (* 256 v_y_3) 383)) (<= n (+ (* v_y_3 512) (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= (+ n (* v 256)) (+ (* 256 v_y_3) 383)) (<= n (+ (* v_y_3 512) (* v 768) 639)) (<= n 127) (<= (+ (* v_y_3 768) n (* v 256)) 383) (<= n (+ 383 (* v 512))) (<= n (+ (* 256 v_y_3) (* (div (+ (* m (- 1)) 255) 256) 128) 127)) (<= (+ n (* v 512)) (+ (* 256 v_y_3) (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= (+ (* v_y_3 512) n (* v 256)) 383) (<= n (+ (* 256 (div (+ (* m (- 1)) 127) 256)) (* 256 v_y_3) 127 (* v 256))) (<= (+ v v_y_3) 0) (<= n (+ 511 (* 256 v_y_3) (* v 256))) (<= n (+ (* (div (+ (* m (- 1)) 255) 256) 256) (* v_y_3 512) 127 (* v 512))) (<= n (+ (* 256 v_y_3) 383 (* v 512))) (<= n (+ (* 256 (div (+ (* m (- 1)) 127) 256)) 127)) (<= (+ n (* v 256)) (+ (* 256 v_y_3) (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= (+ (* 256 v_y_3) n (* v 512)) (+ (* 128 (div (+ (* m (- 1)) 127) 128)) 127)) (<= (+ (* 256 v_y_3) n (* v 512)) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* 256 (div (+ (* m (- 1)) 127) 256)) (* 256 v_y_3) 127)) (<= (+ n (* v 256)) (+ (* 256 (div (+ (* m (- 1)) 127) 256)) (* 256 v_y_3) 127)) (<= 0 (+ (* v 2) (* v_y_3 2) (div (+ (* m (- 1)) 127) 128))) (<= (+ (* 256 v_y_3) n (* v 256)) 383) (<= (+ (* 1280 v) (* 256 v_y_3) n) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= 0 (div (+ (* m (- 1)) 127) 128)) (<= (+ n (* v 256)) (+ (* 256 v_y_3) 255 (* 256 (div (+ (* m (- 1)) 127) 128)))) (<= 0 (+ (* v 4) (* v_y_3 4) (div (+ (* m (- 1)) 127) 128) 1)) (<= (+ (* v_y_3 512) n (* v 512)) 255) (<= 0 (+ v (* v_y_3 2) 1)) (<= (+ (* 256 v_y_3) n (* v 256)) 127) (<= n (+ (* v_y_3 768) 255 (* 256 (div (+ (* m (- 1)) 127) 128)) (* v 256))) (<= 0 (+ (* v 3) (div (+ (* m (- 1)) 127) 256) (* v_y_3 3) 1)) (<= (+ (* 256 v_y_3) n (* v 256)) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ 383 (* v_y_3 512) (* v 512))) (<= 0 (+ (* v 2) v_y_3 1)) (<= (+ (* 256 v_y_3) n) (+ 511 (* v 256))) (<= 0 (+ (div (+ (* m (- 1)) 255) 256) (* v_y_3 2))) (<= n (+ 511 (* 256 v_y_3) (* v 768))) (<= m (+ (* 256 v_y_3) 127)) (<= (+ (* 256 v_y_3) n (* v 768)) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* 256 v_y_3) (* (div (+ (* m (- 1)) 255) 256) 256) 127 (* v 256))) (<= (+ (* 256 v_y_3) n (* v 512)) (+ (* 128 (div (+ (* m (- 1)) 127) 256)) 127)) (<= (+ n (* v 768)) (+ (* 256 v_y_3) 255 (* 256 (div (+ (* m (- 1)) 127) 128)))) (<= (+ n (* v 128)) (+ (* 128 (div (+ (* m (- 1)) 127) 256)) (* v_y_3 128) 127)) (<= n (+ (* 256 v_y_3) 255 (* 256 (div (+ (* m (- 1)) 127) 128)) (* v 256))) (<= (+ n (* v 512)) (+ (* v_y_3 512) (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= 0 (+ (* v 4) (div (+ (* m (- 1)) 255) 256) (* v_y_3 4) 1)) (<= (* v 2) (+ (* v_y_3 2) (div (+ (* m (- 1)) 127) 128))) (<= n (+ (* 256 v_y_3) 639 (* v 512))) (<= (+ n (* v 256)) (+ (* v_y_3 768) 255 (* 256 (div (+ (* m (- 1)) 127) 128)))) (<= (+ (* 256 v_y_3) n (* v 256)) (+ (* 128 (div (+ (* m (- 1)) 127) 256)) 127)) (<= 0 v_y_3) (<= 0 (+ v v_y_3)) (<= n (+ (* 128 (div (+ (* m (- 1)) 127) 128)) 127)) (<= 0 (+ v v_y_3 1)) (<= (+ n (* v 768)) (+ (* 256 v_y_3) (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= (+ n (* v 768)) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* v_y_3 768) 767 (* v 768))) (<= (* v 4) (div (+ (* m (- 1)) 127) 128)) (<= n (+ (* 256 (div (+ (* m (- 1)) 127) 256)) (* 256 v_y_3) 255 (* v 256))) (<= n (+ (* (div (+ (* m (- 1)) 255) 256) 128) 127)) (<= n (+ (* 256 (div (+ (* m (- 1)) 127) 256)) 255 (* v_y_3 512) (* v 512))) (<= m (+ (* 256 v_y_3) 127 (* v 256))) (<= (+ n (* v 256)) (+ (* 128 (div (+ (* m (- 1)) 127) 128)) (* 256 v_y_3) 127)) (<= (+ (* 256 v_y_3) n (* v 256)) 255) (<= (+ (* 256 v_y_3) n (* v 768)) 127) (<= n (+ (* 256 v_y_3) 639 (* v 256))) (<= (+ (* v_y_3 768) n (* v 512)) 383) (<= (+ (* v_y_3 128) n (* v 128)) (+ (* 128 (div (+ (* m (- 1)) 127) 256)) 127)) (<= n (+ (* v_y_3 768) 511 (* v 256))) (<= (+ n (* v 512)) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= (+ (* 256 v_y_3) n) (+ 383 (* v 256))) (<= n (+ (* 256 v_y_3) (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* 128 (div (+ (* m (- 1)) 127) 128)) (* 256 v_y_3) 127 (* v 256))) (<= (+ n (* v 512)) 127) (<= (+ (* v_y_3 512) n (* v 256)) 255) (<= n (+ (* 128 (div (+ (* m (- 1)) 127) 128)) (* 256 v_y_3) 127)) (<= 0 (+ (* v 2) (* v_y_3 2) (div (+ (* m (- 1)) 127) 256) 1)) (<= n (+ 383 (* v_y_3 512))) (<= (+ n (* v 256)) (+ (* (div (+ (* m (- 1)) 255) 256) 128) 127)) (<= (+ (* 256 v_y_3) n) 255) (<= 0 (+ (* v_y_3 2) (div (+ (* m (- 1)) 127) 128) 1)) (<= (+ (* v 1024) n) (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* v_y_3 768) 511 (* v 768))) (<= n 383) (<= 0 (+ (* v 2) (* v_y_3 4) (div (+ (* m (- 1)) 127) 128) 1)) (<= n (+ (* 256 (div (+ (* m (- 1)) 127) 256)) 255 (* v_y_3 512))) (<= (+ (* v_y_3 128) n (* v 384)) (+ (* 128 (div (+ (* m (- 1)) 127) 256)) 127)) (<= m (+ 255 (* v_y_3 512))) (<= n (+ (* v_y_3 768) 255 (* 256 (div (+ (* m (- 1)) 127) 128)) (* v 768))) (<= (+ m (* v 512)) 127) (<= (+ (* 256 v_y_3) n (* v 512)) (+ (* 256 (div (+ (* m (- 1)) 127) 256)) 127)) (<= (+ n (* v 256)) (+ (* 256 v_y_3) (* (div (+ (* m (- 1)) 255) 256) 256) 127)) (<= 0 (+ (* v 2) (* v_y_3 2) (div (+ (* m (- 1)) 127) 128) 1)) (<= (+ n (* v 256)) (+ (* 256 (div (+ (* m (- 1)) 127) 256)) (* 256 v_y_3) 255)) (<= (+ (* 256 v_y_3) n (* v 512)) 127) (<= n (+ (* 256 v_y_3) (* (div (+ (* m (- 1)) 255) 256) 256) 127)) (<= (* v 2) (div (+ (* m (- 1)) 127) 256)) (<= n (+ (* v_y_3 512) (* 256 (div (+ (* m (- 1)) 127) 128)) 127 (* v 256))) (<= (+ m (* v 256)) (+ (* 256 v_y_3) 127)) (<= (* v 2) (div (+ (* m (- 1)) 127) 128)) (<= n (+ (* 256 v_y_3) (* 256 (div (+ (* m (- 1)) 127) 128)) 127 (* v 256))) (<= 0 (+ (* v_y_3 4) (div (+ (* m (- 1)) 127) 128) 1)) (<= (+ n (* v 256)) (+ (* v_y_3 512) (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= n (+ (* v_y_3 512) 639 (* v 512))) (<= 0 (+ (div (+ (* m (- 1)) 255) 256) (* v 2) (* v_y_3 4) 1)) (<= v (+ v_y_3 (div (+ (* m (- 1)) 127) 256))) (<= (+ n (* v 256)) (+ (* 256 (div (+ (* m (- 1)) 127) 256)) 127)) (<= (+ n (* v 256)) (+ (* 128 (div (+ (* m (- 1)) 127) 256)) 127)) (<= m (+ 255 (* v_y_3 512) (* v 512))) (<= (* v 2) (+ (* v_y_3 2) (div (+ (* m (- 1)) 127) 128) 1)) (<= (+ (* v_y_3 768) n (* v 768)) 383) (<= n 255) (<= (+ (* 256 v_y_3) n (* v 256)) (+ (* 128 (div (+ (* m (- 1)) 127) 128)) 127)) (<= v 0) (<= (+ (* v_y_3 512) n (* v 512)) 383) (<= n (+ (* 256 v_y_3) (* (div (+ (* m (- 1)) 255) 256) 128) 127 (* v 256))) (<= (+ n (* v 256)) 127) (<= n (+ (* 256 (div (+ (* m (- 1)) 127) 128)) 127)) (<= 0 (+ v 1)) (<= n (+ (* 256 v_y_3) (* v 768) 639)) (<= (+ (* 256 v_y_3) n) 383) (<= (+ n (* v 256)) 255) (<= (+ (* 256 v_y_3) n (* v 768)) (+ (* 256 (div (+ (* m (- 1)) 127) 256)) 127)))";
		final String expectedResultAsString = null;
		SimplificationTest.runSimplificationTest(funDecls, formulaAsString, expectedResultAsString, SIMPLIFICATION_TECHNIQUE, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void benchmark02() {
		final FunDecl[] funDecls = new FunDecl[] {
			new FunDecl(SmtSortUtils::getIntSort, "m", "n"),
		};
		final String formulaAsString = "(and (<= (+ m 513 (* (div m 128) 512) (* 768 (div (+ n (- 128)) 256))) 0) (<= (div n 256) 0) (<= (+ 257 m (* 768 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ m (* 128 (div n 128)) 129 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 256)) 0) (<= (+ m (* 128 (div n 128)) (* 128 (div (+ m (- 128)) 256)) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ (div (+ m (* 128 (div n 128)) (- 128)) 256) 2 (div (+ n (- 128)) 256)) 0) (<= (+ (* (div n 256) 512) n (* (div m 128) 512)) 255) (<= (+ m (* 256 (div (+ m (* 128 (div n 128)) (- 128)) 256)) (* 256 (div n 256)) 129) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div (+ m (* (div n 256) 128) (- 128)) 384)) 385) 0) (<= (+ (div n 256) (div (+ m (- 256)) 512)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 385 (* 256 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512))) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div (+ m (* 128 (div n 128)) (- 128)) 256)) 129) 0) (<= (+ m (* (div n 256) 512) (* (div m 128) 512)) 383) (<= (+ m (* (div n 256) 128) 129 (* 256 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ 257 m (* 768 (div (+ m (- 128)) 256)) (* 768 (div n 128))) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 128))) 512) 256) 1) 0) (<= (+ (* (div (+ m (- 256) (* 256 (div n 256))) 768) 4) (div n 256) 3) 0) (<= (+ m (* 256 (div n 256)) 385 (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 512)) 0) (<= (+ m (* 768 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) 513 (* 256 (div n 256))) 0) (<= (+ (* 256 (div (+ m (- 256) (* 256 (div n 256))) 768)) m 129 (* 256 (div n 128))) 0) (<= (+ m (* 256 (div n 256)) (* (div (+ (- 2) (div n 256)) 3) 512) 385) 0) (<= (+ 257 n (* (div (+ m (* 256 (div n 256)) (- 128)) 512) 512)) 0) (<= (+ m (* 256 (div (+ m (* (div n 256) 128) (- 128)) 384)) 1) 0) (<= (+ m 1 (* 768 (div (+ n (- 128)) 256))) 0) (<= (+ (div (+ m (- 256)) 512) 1) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div n 256)) (* 256 (div m 128)) 129) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 385 (* 256 (div (+ m (- 384)) 768))) 0) (<= (+ m (* (div (+ m (- 256)) 512) 512) 129) 0) (<= (+ m (* 256 (div n 256)) 385 (* (div (+ m (- 256) (* 256 (div n 128))) 512) 512)) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div (+ m (- 256)) 512)) 129) 0) (<= (+ (div n 256) 3 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 4)) 0) (<= (+ m (* 256 (div n 128)) (* 768 (div (+ n (- 128)) 256))) 255) (<= (+ 3 (div (+ n (- 128)) 256) (* 3 (div (+ m (- 384)) 768))) 0) (<= (+ m (* 256 (div n 256)) 129 (* 256 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512))) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 256))) 768) 512) 385 (* 256 (div n 128))) 0) (<= (+ m (* (div n 256) 512) (* 256 (div (+ n (- 128)) 256)) (* (div m 128) 512) 1) 0) (<= (+ 2 (div n 128) (* 2 (div (+ n (- 128)) 256)) (* 2 (div (+ m 128) 256))) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 128))) 512) 256) (* (div n 256) 128) 129) 0) (<= (+ m (* (div (+ m (- 128)) 256) 512) 129) 0) (<= (+ (div (+ m (* 256 (div n 256)) (- 128)) 512) 1) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) (* 256 (div (+ n (- 128)) 256)) (* 256 (div n 256)) 385) 0) (<= (+ 2 (div n 256) (div (+ n (- 128)) 256) (div (+ m (- 128)) 256)) 0) (<= (+ 2 (div (+ n (- 128)) 256) (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 2)) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div (+ n (- 128)) 256)) 129 (* 256 (div (+ m 128) 256))) 0) (<= (+ 2 (div n 128) (* 2 (div (+ m (- 512)) 1024))) 0) (<= (+ (* 256 (div (+ m (- 128)) 256)) n 129 (* 256 (div n 128))) 0) (<= (+ m (* (div n 256) 384) (* 256 (div (+ m (- 128)) 256)) 129) 0) (<= (+ m (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 512) 385 (* 256 (div n 128))) 0) (<= (+ (div n 256) (div (+ (- 2) (div n 256)) 3)) 0) (<= (+ (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) 1) 0) (<= (+ 2 (* 2 (div (+ m (- 128)) 256)) (div (+ n (- 128)) 256) (* 2 (div n 256))) 0) (<= (+ 2 (div n 256) (* 2 (div n 128)) (* 2 (div (+ m (- 128)) 256))) 0) (<= (+ 2 (div n 256) (* 2 (div (+ m (- 256)) 512))) 0) (<= (+ (* 256 (div (+ m (- 256) (* 256 (div n 256))) 768)) m (* 256 (div (+ n (- 128)) 256)) 385) 0) (<= (+ (* (div n 256) 512) n) 255) (<= (+ (div n 256) 3 (* (div (+ (- 2) (div n 256)) 3) 4)) 0) (<= (+ m (* 256 (div n 128)) (* (div (+ n (- 128)) 256) 512)) 127) (<= (+ m 129 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 128) (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div n 256))) 127) (<= (+ m 513 (* 256 (div n 128)) (* 768 (div (+ m (- 256) (* 256 (div n 256))) 768))) 0) (<= (+ (div n 256) 3 (* (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) 4)) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div (+ n (- 128)) 256))) 127) (<= (+ m (* (div n 256) 128) (* 128 (div (+ n (- 128)) 256)) 1) 0) (<= (+ m (* (div n 256) 384) (* 256 (div m 128))) 127) (<= (+ (* 256 (div (+ n (- 128)) 256)) n) 127) (<= (+ m (* 256 (div n 256)) (* (div (+ m 128) 256) 512) 385 (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ m (* (div n 256) 512) (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (- 128)) 256) 512)) 0) (<= (+ m (* 128 (div n 128)) 129 (* 256 (div (+ m (* 256 (div n 256)) (- 128)) 512))) 0) (<= (+ (* 256 (div (+ (- 2) (div n 256)) 3)) m (* 128 (div n 128)) 129) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div (+ n (- 128)) 256)) (* 256 (div m 128)) 129) 0) (<= (+ (* 2 (div (+ m (- 384)) 768)) 2 (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div (+ m (* 128 (div n 128)) (- 128)) 256)) 1) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 385 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 256)) 0) (<= (+ (* 2 (div (+ (- 2) (div n 256)) 3)) 2 (div n 256)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 385 (* 256 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ 3 (div n 128) (* (div (+ (- 2) (div n 256)) 3) 4)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 385 (* 256 (div (+ m (- 512)) 1024))) 0) (<= (+ 257 m (* 768 (div (+ m (- 128)) 256)) (* 768 (div n 256))) 0) (<= (+ m (* 256 (div n 256)) (* (div m 128) 512) 385 (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ (div n 256) 3 (* 4 (div (+ m (- 384)) 768))) 0) (<= (+ 2 (div (+ m (- 512)) 1024) (div (+ n (- 128)) 256)) 0) (<= (+ (* 2 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512)) 2 (div n 256)) 0) (<= (+ m (* (div n 256) 512) (* 256 (div (+ n (- 128)) 256)) 1) 0) (<= (+ 257 m (* 768 (div (+ m 128) 256)) (* 768 (div (+ n (- 128)) 256))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 512)) 0) (<= (+ 257 n (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 512)) 0) (<= (+ m (* (div n 256) 128) 129 (* 256 (div (+ m (* (div n 256) 128) (- 128)) 384))) 0) (<= (+ 257 (* (div (+ m (- 128)) 256) 512) n (* (div n 128) 512)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (- 256) (* 256 (div n 128))) 512) 512)) 0) (<= (+ (div (+ m (- 128)) 256) (* 2 (div n 256))) 0) (<= (+ (div (+ (- 1) (div (+ n (- 128)) 256)) 2) (div n 256)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* (div (+ m (- 256)) 512) 512) 513) 0) (<= (+ 3 (* 3 (div (+ m (* 256 (div n 256)) (- 128)) 512)) (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ (- 2) (div n 256)) 3) 512)) 0) (<= (+ (* 256 (div (+ n (- 128)) 256)) (* 256 (div m 128)) n 129) 0) (<= (+ m (* 768 (div (+ m (- 512)) 1024)) 513 (* 256 (div n 128))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 129 (* 256 (div (+ m 128) 256)) (* 256 (div n 128))) 0) (<= (+ (div n 256) (* 2 (div (+ n (- 128)) 256))) 0) (<= (+ m (* (div (+ m 128) 256) 512) 385 (* 256 (div n 128)) (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ (* 256 (div (+ m (- 128)) 256)) (* 256 (div n 256)) n 129) 0) (<= (+ m (* 256 (div (+ m (* 128 (div n 128)) (- 128)) 256)) (* (div n 256) 128) 129) 0) (<= (+ (div n 256) (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) 0) (<= (+ m 129 (* (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) 512)) 0) (<= (+ m (* (div m 128) 512) (* 768 (div n 256))) 127) (<= (+ 2 (div n 256) (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 2)) 0) (<= (+ (div (+ m (- 256) (* 256 (div n 128))) 512) 2 (div (+ n (- 128)) 256)) 0) (<= (+ m (* (div n 256) 128) (* 128 (div m 128)) (* 128 (div (+ n (- 128)) 256)) 1) 0) (<= (+ m (* 256 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) 1) 0) (<= (+ m (* 256 (div (+ m (- 384)) 768)) 1) 0) (<= (+ m (* 256 (div n 256))) 127) (<= (+ n 129 (* 256 (div (+ m (* (div n 256) 128) (- 128)) 384))) 0) (<= (+ 3 (* 3 (div (+ (- 2) (div n 256)) 3)) (div (+ n (- 128)) 256)) 0) (<= (+ m (* (div (+ m (- 128)) 256) 512) 385 (* 256 (div n 128))) 0) (<= (+ m 513 (* 256 (div n 256)) (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 768)) 0) (<= (+ (* 256 (div (+ (- 2) (div n 256)) 3)) m 1) 0) (<= (+ (* 3 (div (+ n (- 128)) 256)) 2 (* 2 (div (+ m 128) 256))) 0) (<= (+ n 129 (* 256 (div (+ m (- 512)) 1024))) 0) (<= (+ (* 2 (div (+ (- 2) (div n 256)) 3)) 2 (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div (+ m 128) 256)) 1) 0) (<= (+ 3 (* 3 (div (+ m (- 256)) 512)) (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) (* (div n 256) 128) 129 (* 256 (div n 128))) 0) (<= (+ (* 4 (div m 128)) (div n 256) 3 (* (div (+ n (- 128)) 256) 4)) 0) (<= (+ (* 2 (div (+ m (* 256 (div n 256)) (- 128)) 512)) 2 (div n 128)) 0) (<= (+ 257 m (* (div (+ m (- 256) (* 256 (div n 128))) 512) 768)) 0) (<= (+ 257 (* (div (+ m (- 128)) 256) 512) n) 0) (<= (+ m (* (div n 256) 384)) 127) (<= (+ (div (+ m (* 128 (div n 128)) (- 128)) 256) 1) 0) (<= (+ (* (div (+ m (* (div n 256) 128) (- 128)) 384) 512) m 385 (* 256 (div n 128))) 0) (<= (+ (div (+ n (- 128)) 256) (div m 128) 1) 0) (<= (+ m 129 (* (div (+ m 128) 256) 512) (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ (* (div (+ m 128) 256) 4) (div n 256) 3 (* (div (+ n (- 128)) 256) 4)) 0) (<= (+ (* 256 (div (+ m (- 256) (* 256 (div n 256))) 768)) n 129) 0) (<= (+ 3 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 4) (div n 128)) 0) (<= (+ 2 (div (+ m (- 256)) 512) (div (+ n (- 128)) 256)) 0) (<= (+ (div (+ m (- 256) (* 256 (div n 128))) 512) (div n 256)) 0) (<= (+ (* 4 (div m 128)) 3 (div n 128) (* (div (+ n (- 128)) 256) 4)) 0) (<= (+ (* 256 (div (+ m (- 256) (* 256 (div n 256))) 768)) m 1) 0) (<= (+ 3 (div n 128) (* (div (+ m (- 128)) 256) 4)) 0) (<= (+ (* 2 (div (+ m (- 384)) 768)) 2 (div n 256)) 0) (<= (+ m (* 256 (div (+ m (* 256 (div n 256)) (- 128)) 512)) 1) 0) (<= (+ m 513 (* 256 (div n 256)) (* 768 (div m 128)) (* 768 (div (+ n (- 128)) 256))) 0) (<= (+ 3 (div (+ n (- 128)) 256) (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 3)) 0) (<= (+ (div n 256) 3 (* (div (+ m (- 128)) 256) 4)) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) (* (div n 256) 128) 129) 0) (<= (+ m (* (div n 256) 512) (* 256 (div n 128))) 127) (<= (+ m (* 128 (div n 128)) 129 (* 256 (div (+ m (* (div n 256) 128) (- 128)) 384))) 0) (<= (+ 2 (div n 128) (div (+ n (- 128)) 256) (div (+ m (- 128)) 256)) 0) (<= (+ m (* (div n 256) 512)) 127) (<= (+ m 513 (* 768 (div (+ m (- 384)) 768)) (* 256 (div n 128))) 0) (<= (+ m (* 256 (div (+ m (* 128 (div n 128)) (- 128)) 256)) 129 (* 256 (div n 128))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 385 (* 256 (div (+ m (* 256 (div n 256)) (- 128)) 512))) 0) (<= (+ (div n 256) (div (+ m (* (div n 256) 128) (- 128)) 384)) 0) (<= (+ 2 (div n 256) (* 2 (div (+ m (- 128)) 256))) 0) (<= (+ m (* (div (+ (- 2) (div n 256)) 3) 512) 129) 0) (<= (+ (* 2 (div (+ m (* (div n 256) 128) (- 128)) 384)) 2 (div n 256)) 0) (<= (+ 2 (div (+ m 128) 256) (* 2 (div (+ n (- 128)) 256))) 0) (<= (+ (div (+ m 128) 256) (div (+ n (- 128)) 256) 1) 0) (<= (+ m (* 256 (div n 256)) 129 (* 256 (div (+ m (- 384)) 768))) 0) (<= (+ m (* 256 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512)) 1) 0) (<= (+ m 513 (* 256 (div n 256)) (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 768)) 0) (<= (+ (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 2 (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div m 128)) 1) 0) (<= (+ (* 256 (div (+ m (- 256)) 512)) n 129) 0) (<= (+ (div (+ (- 2) (div n 256)) 3) 1) 0) (<= (+ m (* (div (+ m (- 384)) 768) 512) (* 256 (div n 256)) 385) 0) (<= (+ 2 (div n 256) (* 2 (div (+ m (- 256) (* 256 (div n 256))) 768))) 0) (<= (+ (div (+ m (* (div n 256) 128) (- 128)) 384) 1) 0) (<= (+ 2 (* 2 (div n 128)) (* 2 (div (+ m (- 128)) 256)) (div (+ n (- 128)) 256)) 0) (<= (+ 2 (div (+ n (- 128)) 256) (div (+ m (- 128)) 256)) 0) (<= (+ m 513 (* 256 (div n 128)) (* 768 (div (+ m (* 256 (div n 256)) (- 128)) 512))) 0) (<= (+ m (* 128 (div n 128)) 129 (* 256 (div (+ m (- 384)) 768))) 0) (<= (+ m (* (div (+ m (* 128 (div (+ n (- 128)) 256))) 256) 512) 385 (* 256 (div n 128))) 0) (<= (+ (* (div (+ m (- 512)) 1024) 4) (div n 256) 3) 0) (<= (+ m (* 768 (div (+ m (- 128)) 256)) 513 (* 768 (div n 256)) (* 256 (div n 128))) 0) (<= (+ (* (div (+ m (* (div n 256) 128) (- 128)) 384) 512) 257 n) 0) (<= (+ m (* 256 (div n 256)) (* 256 (div (+ m (- 256)) 512)) 129) 0) (<= (+ m 513 (* 768 (div m 128)) (* 256 (div n 128)) (* 768 (div (+ n (- 128)) 256))) 0) (<= (+ m 129 (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ m (* 768 (div (+ m (- 128)) 256)) 513 (* 256 (div n 256)) (* 768 (div n 128))) 0) (<= (+ m 385 (* 256 (div n 128)) (* (div (+ m (- 256) (* 256 (div n 128))) 512) 512)) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) 1) 0) (<= (+ (div (+ m (- 512)) 1024) 1) 0) (<= (+ 3 (* 3 (div m 128)) (* (div (+ n (- 128)) 256) 4)) 0) (<= (+ 257 m (* 768 (div (+ m (- 256) (* 256 (div n 256))) 768))) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 128))) 512) 256) (* 256 (div n 256)) 129) 0) (<= (+ m (* 128 (div (+ m (- 128)) 256)) (* (div n 256) 128) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ 2 (div n 128) (* 2 (div (+ m (- 128)) 256))) 0) (<= (+ m (* (div n 256) 512) (* (div (+ m (- 128)) 256) 512) 385 (* 256 (div n 128))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div n 256)) 129 (* 256 (div (+ m 128) 256))) 0) (<= (+ 3 (* (div n 256) 3) (* 3 (div (+ m (- 128)) 256)) (div (+ n (- 128)) 256)) 0) (<= (+ (* 2 (div (+ (- 2) (div n 256)) 3)) 2 (div n 128)) 0) (<= (+ 2 (div n 256) (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 2)) 0) (<= (+ (* (div n 256) 4) (div n 128)) 1) (<= (+ 257 (* (div (+ m (- 256) (* 256 (div n 256))) 768) 512) n) 0) (<= (+ 257 n (* (div (+ m 128) 256) 512) (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ (* (div (+ m (* (div n 256) 128) (- 128)) 384) 512) m (* 256 (div (+ n (- 128)) 256)) 513) 0) (<= (+ 257 m (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 768)) 0) (<= (+ 2 (div (+ m (* (div n 256) 128) (- 128)) 384) (div (+ n (- 128)) 256)) 0) (<= (+ m 129 (* 256 (div (+ m (- 384)) 768)) (* 256 (div n 128))) 0) (<= (+ m (* (div n 256) 128) 129 (* 256 (div (+ m (- 384)) 768))) 0) (<= (+ (* (div (+ m (- 512)) 1024) 4) 3 (div n 128)) 0) (<= (+ (* 2 (div (+ m (* (div n 256) 128) (- 128)) 384)) 2 (div n 128)) 0) (<= (+ m 129 (* 256 (div n 128)) (* 256 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512))) 0) (<= (+ (div n 256) 3 (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 4)) 0) (<= (+ (* 256 (div (+ (- 2) (div n 256)) 3)) n 129) 0) (<= (+ m (* (div (+ m (- 128)) 256) 512) 129 (* (div n 128) 512)) 0) (<= (+ m (* 256 (div n 256)) (* (div (+ n (- 128)) 256) 512)) 127) (<= (+ m (* (div (+ (- 2) (div n 256)) 3) 512) 385 (* 256 (div n 128))) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) (* 256 (div n 256)) 129) 0) (<= (+ 2 (div n 128) (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 2)) 0) (<= (+ m 129 (* (div m 128) 512) (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ m (* (div (+ m (- 128)) 256) 512) (* 768 (div n 256)) 385) 0) (<= (+ 257 (* (div (+ m (* 128 (div (+ n (- 128)) 256))) 256) 512) n) 0) (<= (+ (* 2 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512)) 2 (div n 128)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* (div (+ m (- 256) (* 256 (div n 128))) 512) 256) 385) 0) (<= (+ 257 m (* 768 (div (+ m (* 256 (div n 256)) (- 128)) 512))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* (div (+ m 128) 256) 128) 129) 0) (<= (+ n 129 (* 256 (div (+ m (- 384)) 768))) 0) (<= (+ 257 m (* 768 (div (+ m (- 384)) 768))) 0) (<= (+ (div n 128) (* 2 (div (+ n (- 128)) 256))) 0) (<= (+ m (* 256 (div (+ m (- 512)) 1024)) 1) 0) (<= (+ 2 (* 2 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) (div (+ n (- 128)) 256)) 0) (<= (+ 2 (* (div n 256) 3) (* 2 (div (+ m (- 128)) 256))) 0) (<= (+ (* 3 (div n 128)) 2 (* 2 (div (+ m (- 128)) 256))) 0) (<= (+ 257 m (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 768)) 0) (<= (+ 257 (* (div (+ m (- 384)) 768) 512) n) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (- 128)) 256) 512)) 0) (<= (+ (* 2 (div (+ m (* 256 (div n 256)) (- 128)) 512)) 2 (div n 256)) 0) (<= (+ 2 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) (div (+ n (- 128)) 256)) 0) (<= (+ (* (div (+ m (- 256) (* 256 (div n 128))) 512) 2) 2 (div n 256)) 0) (<= (+ (* 2 (div m 128)) (* 3 (div (+ n (- 128)) 256)) 2) 0) (<= (+ m (* 128 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512)) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ 2 (div (+ m (* 256 (div n 256)) (- 128)) 512) (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) 129 (* (div n 128) 512)) 0) (<= (+ m (* 256 (div n 256)) (* (div (+ m (* 256 (div n 256)) (- 128)) 512) 512) 385) 0) (<= (+ (div n 256) (div (+ m (- 512)) 1024)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* (div n 256) 128)) 127) (<= (+ (* 256 (div (+ m (- 256) (* 256 (div n 256))) 768)) m (* (div n 256) 128) 129) 0) (<= (+ m 513 (* 256 (div n 256)) (* 768 (div (+ m 128) 256)) (* 768 (div (+ n (- 128)) 256))) 0) (<= (+ (* 2 (div m 128)) (div n 128) (* 2 (div n 256))) 0) (<= (+ m 129 (* (div (+ m (- 512)) 1024) 512)) 0) (<= (+ (* (div (+ m (* (div n 256) 128) (- 128)) 384) 512) m 129) 0) (<= (+ m 513 (* 768 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512)) (* 256 (div n 128))) 0) (<= (+ (div n 128) (div (+ m (- 128)) 256) 1) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 128))) 512) 128) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ (div (+ m (* 128 (div n 128)) (- 128)) 256) (div n 256)) 0) (<= (+ m 129 (* 256 (div (+ m (* 256 (div n 256)) (- 128)) 512)) (* 256 (div n 128))) 0) (<= (+ (div (+ m (- 384)) 768) 1) 0) (<= (+ 257 m (* 768 (div (+ m (- 256)) 512))) 0) (<= (+ m (* (div (+ m (- 256)) 512) 128) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ m (* 768 (div m 128)) (* 768 (div n 256))) 511) (<= (+ n 129 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 256)) 0) (<= (+ m 129 (* 256 (div (+ m (* (div n 256) 128) (- 128)) 384)) (* 256 (div n 128))) 0) (<= (+ 2 (div n 128) (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 2)) 0) (<= (+ 257 n (* (div m 128) 512) (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ m 129 (* 256 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) (* 256 (div n 128))) 0) (<= (+ 2 (div (+ (- 2) (div n 256)) 3) (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div n 128))) 127) (<= (+ m (* (div n 256) 512) (* 256 (div (+ m (- 128)) 256)) 129) 0) (<= (+ m 129 (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 128) (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ m (* (div n 256) 128) 129 (* 256 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512))) 0) (<= (+ m 513 (* 256 (div n 128)) (* 768 (div (+ m 128) 256)) (* 768 (div (+ n (- 128)) 256))) 0) (<= (+ m (* (div n 256) 1024) (* 768 (div m 128))) 255) (<= (+ 257 m (* 768 (div (+ (- 2) (div n 256)) 3))) 0) (<= (+ (div n 256) (div (+ m (- 384)) 768)) 0) (<= (+ m (* (div n 256) 128) 129 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 256)) 0) (<= (+ (* (div n 256) 4) (* 4 (div m 128)) (div n 128)) 1) (<= (+ 2 (* 2 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) (div n 128)) 0) (<= (+ (div n 256) (div m 128)) 0) (<= (+ 3 (* (div (+ m (- 256) (* 256 (div n 128))) 512) 3) (div (+ n (- 128)) 256)) 0) (<= (+ 2 (div n 256) (* 2 (div (+ n (- 128)) 256)) (* 2 (div (+ m 128) 256))) 0) (<= (+ m (* 128 (div n 128)) (* (div (+ m (- 256) (* 256 (div n 128))) 512) 256) 129) 0) (<= (+ (* (div (+ m (- 256) (* 256 (div n 128))) 512) 2) 2 (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div n 256)) (* (div (+ m (* 128 (div (+ n (- 128)) 256))) 256) 512) 385) 0) (<= (+ (div (+ m (- 128)) 256) 1) 0) (<= (+ 2 (div n 128) (* 2 (div (+ m (- 128)) 256)) (* 2 (div n 256))) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 256))) 768) 512) (* 256 (div n 256)) 385) 0) (<= (+ n 129 (* 256 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ (* 256 (div (+ (- 2) (div n 256)) 3)) m (* 256 (div (+ n (- 128)) 256)) 385) 0) (<= (+ m (* 256 (div n 256)) 129 (* 256 (div (+ m (* (div n 256) 128) (- 128)) 384))) 0) (<= (+ m 513 (* 256 (div n 256)) (* 768 (div (+ m (* 256 (div n 256)) (- 128)) 512))) 0) (<= (+ m 513 (* (div (+ m 128) 256) 512) (* 768 (div (+ n (- 128)) 256))) 0) (<= (+ 2 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 2) (div (+ n (- 128)) 256)) 0) (<= (+ 257 n (* (div (+ m (- 512)) 1024) 512)) 0) (<= (+ (* 3 (div (+ m (- 512)) 1024)) 3 (div (+ n (- 128)) 256)) 0) (<= (+ 3 (div (+ n (- 128)) 256) (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 3)) 0) (<= (+ 257 n (* (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) 512)) 0) (<= (+ (* 2 (div m 128)) 2 (div n 256) (* 2 (div (+ n (- 128)) 256))) 0) (<= (+ (* 2 (div m 128)) (div (+ n (- 128)) 256) (* 2 (div n 256))) 0) (<= (+ m 129 (* 128 (div (+ m (- 512)) 1024)) (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ (div n 256) (div (+ m (* 256 (div (+ n (- 128)) 256))) 512)) 0) (<= (+ m (* 256 (div n 256)) 385 (* (div (+ m (- 512)) 1024) 512)) 0) (<= (+ (* 256 (div (+ m (- 128)) 256)) n 129) 0) (<= (+ m 129 (* 128 (div (+ m (* 256 (div n 256)) (- 128)) 512)) (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ (* (div n 256) 4) 3 (div n 128) (* (div (+ m (- 128)) 256) 4)) 0) (<= (+ (div n 256) 3 (* 4 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ 3 (* 3 (div (+ m 128) 256)) (* (div (+ n (- 128)) 256) 4)) 0) (<= (+ m (* 768 (div (+ m (- 512)) 1024)) 513 (* 256 (div n 256))) 0) (<= (+ (* 3 (div (+ m (- 256) (* 256 (div n 256))) 768)) 3 (div (+ n (- 128)) 256)) 0) (<= (+ n 129 (* 256 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512))) 0) (<= (+ m (* 128 (div n 128)) 129 (* 256 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div m 128)) 129 (* 256 (div n 128))) 0) (<= (+ n 129 (* 256 (div (+ m (* 256 (div n 256)) (- 128)) 512))) 0) (<= (+ 3 (div n 128) (* (div (+ m (* (div n 256) 128) (- 128)) 384) 4)) 0) (<= (+ m (* 768 (div (+ m (- 128)) 256)) 513 (* 256 (div n 128))) 0) (<= (+ m (* (div n 256) 128) 129 (* 256 (div (+ m (- 512)) 1024))) 0) (<= (+ m 129 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 256) (* 256 (div n 128))) 0) (<= (+ m 385 (* 256 (div (+ m 128) 256)) (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ 2 (div (+ n (- 128)) 256) (div (+ m (- 384)) 768)) 0) (<= (+ 257 (* (div (+ (- 2) (div n 256)) 3) 512) n) 0) (<= (+ m (* 768 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) 513 (* 256 (div n 128))) 0) (<= (+ m (* (div (+ m (- 384)) 768) 512) 129) 0) (<= (+ 3 (* 3 (div (+ m (- 128)) 256)) (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) (* (div n 128) 384) 129) 0) (<= (+ 257 m (* 768 (div m 128)) (* 768 (div (+ n (- 128)) 256))) 0) (<= (+ (* (div (+ m 128) 256) 4) 3 (div n 128) (* (div (+ n (- 128)) 256) 4)) 0) (<= (+ (div n 256) (div (+ m (* 256 (div n 256)) (- 128)) 512)) 0) (<= (+ 3 (* 4 (div (+ m (- 384)) 768)) (div n 128)) 0) (<= (+ m (* 128 (div n 128)) 129 (* 256 (div (+ m (- 512)) 1024))) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) 129 (* 256 (div n 128))) 0) (<= (+ 3 (* (div (+ m (* 256 (div n 256)) (- 128)) 512) 4) (div n 128)) 0) (<= (+ 2 (div (+ n (- 128)) 256) (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) 0) (<= (+ 2 (div (+ n (- 128)) 256) (* 2 (div (+ m (- 256) (* 256 (div n 256))) 768))) 0) (<= (+ m 513 (* 256 (div n 256)) (* 768 (div (+ m (- 256) (* 256 (div n 256))) 768))) 0) (<= (+ (div (+ m (* 128 (div (+ n (- 128)) 256))) 256) 1) 0) (<= (+ (* 256 (div (+ m (- 256) (* 256 (div n 256))) 768)) m (* 128 (div n 128)) 129) 0) (<= (+ m (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 512) (* 256 (div n 256)) 385) 0) (<= (+ (div n 256) (* (div (+ n (- 128)) 256) 4)) 1) (<= (+ (* (div (+ m (- 256) (* 256 (div n 128))) 512) 2) 2 (div n 128)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div n 256)) 129) 0) (<= (+ m (* (div (+ m (- 384)) 768) 512) 385 (* 256 (div n 128))) 0) (<= (+ m (* (div n 256) 128) (* 256 (div (+ m (- 256)) 512)) 129) 0) (<= (+ m (* 256 (div n 256)) 129 (* 256 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ m 129 (* (div (+ (- 2) (div n 256)) 3) 128) (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ m (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 256) 1) 0) (<= (+ n (* (div (+ n (- 128)) 256) 512)) 255) (<= (+ 2 (div n 128) (* 2 (div (+ m (- 256) (* 256 (div n 256))) 768))) 0) (<= (+ m 385 (* 256 (div n 128)) (* (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) 512)) 0) (<= (+ 2 (* 2 (div (+ m (- 128)) 256)) (div (+ n (- 128)) 256)) 0) (<= (+ (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 1) 0) (<= (+ m 129 (* 256 (div (+ m (- 512)) 1024)) (* 256 (div n 128))) 0) (<= (+ (div n 256) (div (+ m 128) 256) (div (+ n (- 128)) 256)) 0) (<= (+ (div (+ m (- 256) (* 256 (div n 128))) 512) 1) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 256))) 768) 128) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ (* 2 (div n 256)) (div m 128)) 1) (<= (+ 2 (div n 128) (* 2 (div (+ m (- 256)) 512))) 0) (<= (+ 2 (* 2 (div (+ m (- 256)) 512)) (div (+ n (- 128)) 256)) 0) (<= (+ 257 m (* 768 (div (+ m (- 512)) 1024))) 0) (<= (+ 2 (div n 256) (* 2 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ m (* 768 (div (+ m (* (div n 256) 128) (- 128)) 384)) 513 (* 256 (div n 256))) 0) (<= (+ (div n 256) (div (+ m (- 256) (* 256 (div n 256))) 768)) 0) (<= (+ (div (+ m (- 256) (* 256 (div n 256))) 768) 1) 0) (<= (+ m 513 (* 768 (div (+ m (- 256)) 512)) (* 256 (div n 128))) 0) (<= (+ 257 m (* 768 (div (+ m (* (div n 256) 128) (- 128)) 384))) 0) (<= (+ m (* 256 (div n 256)) 129 (* 256 (div (+ m (- 512)) 1024))) 0) (<= (+ (* (div n 256) 3) (* 3 (div m 128)) (div (+ n (- 128)) 256)) 0) (<= (+ m 513 (* 256 (div n 256)) (* (div (+ m (- 256) (* 256 (div n 128))) 512) 768)) 0) (<= (+ m 385 (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 512) (* 256 (div n 128))) 0) (<= (+ m (* 256 (div (+ m (- 256)) 512)) 129 (* 256 (div n 128))) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 128))) 512) 256) 129 (* 256 (div n 128))) 0) (<= (+ (div n 128) (* 2 (div n 256))) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 256))) 768) 512) (* 256 (div (+ n (- 128)) 256)) 513) 0) (<= (+ (* 256 (div n 256)) n) 127) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 512)) 0) (<= (+ m (* (div n 256) 1024)) 255) (<= (+ m (* (div m 128) 512) 385 (* 256 (div n 128)) (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ (* 2 (div m 128)) 2 (div n 128) (* 2 (div (+ n (- 128)) 256))) 0) (<= (+ 3 (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 4) (div n 128)) 0) (<= (+ (* 2 (div (+ m (* (div n 256) 128) (- 128)) 384)) 2 (div (+ n (- 128)) 256)) 0) (<= (+ m (* 256 (div n 256)) (* 768 (div (+ n (- 128)) 256))) 255) (<= (+ (* (div (+ m (- 256) (* 256 (div n 128))) 512) 256) n 129) 0) (<= (+ m (* (div (+ m (- 256) (* 256 (div n 256))) 768) 512) 129) 0) (<= (+ (div n 256) 3 (* (div (+ m (- 256) (* 256 (div n 128))) 512) 4)) 0) (<= (+ (div n 256) (div n 128) (div (+ m (- 128)) 256)) 0) (<= (+ 2 (div (+ n (- 128)) 256) (* 2 (div (+ m (- 512)) 1024))) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div (+ m (- 128)) 256)) (* 256 (div n 256)) 129) 0) (<= (+ 257 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 512) n) 0) (<= (+ (div n 256) 3 (* (div (+ m (* 256 (div n 256)) (- 128)) 512) 4)) 0) (<= (+ m (* 256 (div n 256)) (* 256 (div m 128)) (* 256 (div n 128))) 127) (<= (+ 2 (div n 256) (* 2 (div (+ m (- 512)) 1024))) 0) (<= (+ m (* 256 (div m 128)) 385 (* (div (+ n (- 128)) 256) 512)) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) (* 256 (div (+ n (- 128)) 256)) 385 (* 256 (div n 128))) 0) (<= (+ m (* 768 (div m 128)) (* 768 (div n 256)) (* 256 (div n 128))) 255) (<= (+ 3 (div n 128) (* (div (+ m (- 256)) 512) 4)) 0) (<= (+ m (* (div (+ m (* (div n 256) 128) (- 128)) 384) 128) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ m (* (div (+ m (- 256)) 512) 512) 385 (* 256 (div n 128))) 0) (<= (+ (* 4 (div m 128)) (* 5 (div n 256))) 1) (<= (+ m (* 768 (div (+ m (- 128)) 256)) 513 (* 256 (div n 256))) 0) (<= (+ 3 (* (div (+ m (- 128)) 256) 4) (* 5 (div n 256))) 0) (<= (+ m 513 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 768) (* 256 (div n 128))) 0) (<= (+ m (* (div (+ m (- 256)) 512) 512) (* 256 (div n 256)) 385) 0) (<= (+ m 385 (* (div (+ m (- 512)) 1024) 512) (* 256 (div n 128))) 0) (<= (+ 3 (div n 128) (* (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) 4)) 0) (<= (+ (* (div n 256) 3) (div (+ n (- 128)) 256)) 0) (<= (+ m (* (div (+ m (- 128)) 256) 512) 385 (* 768 (div n 128))) 0) (<= (+ (* 256 (div n 256)) (* 256 (div m 128)) n) 127) (<= (+ 3 (div n 128) (* 4 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ m 513 (* 768 (div (+ m (- 256)) 512)) (* 256 (div n 256))) 0) (<= (+ (* (div (+ m (- 256) (* 256 (div n 256))) 768) 4) 3 (div n 128)) 0) (<= (+ 3 (div (+ n (- 128)) 256) (* 3 (div (+ m (* (div n 256) 128) (- 128)) 384))) 0) (<= (+ m (* 256 (div n 256)) (* (div (+ m (- 128)) 256) 512) 385) 0) (<= (+ (div n 256) (div (+ n (- 128)) 256) 1) 0) (<= (+ m (* (div n 256) 512) (* 256 (div m 128))) 127) (<= (+ m 129 (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 512)) 0) (<= (+ m (* 256 (div n 256)) 129 (* 256 (div (+ m (* 256 (div n 256)) (- 128)) 512))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (* 256 (div n 256)) (- 128)) 512) 512)) 0) (<= (+ 257 m (* 768 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512))) 0) (<= (+ m (* 128 (div (+ m (- 384)) 768)) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ m 513 (* (div (+ m (- 256) (* 256 (div n 128))) 512) 768) (* 256 (div n 128))) 0) (<= (+ (* 2 (div m 128)) (* (div n 256) 3)) 0) (<= (+ m (* 768 (div (+ m (* (div n 256) 128) (- 128)) 384)) 513 (* 256 (div n 128))) 0) (<= (+ 3 (* 3 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512)) (div (+ n (- 128)) 256)) 0) (<= (+ (div n 256) 3 (* (div (+ m (- 256)) 512) 4)) 0) (<= (+ 2 (div (+ m (- 256) (* 256 (div n 256))) 768) (div (+ n (- 128)) 256)) 0) (<= (+ m (* (div n 256) 512) (* (div (+ m (- 128)) 256) 512) 129) 0) (<= (+ (* 3 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) 3 (div (+ n (- 128)) 256)) 0) (<= (+ m 513 (* 256 (div n 256)) (* 768 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512))) 0) (<= (+ m (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 512) 129) 0) (<= (+ (* (div n 128) 4) (div n 256) 3 (* (div (+ m (- 128)) 256) 4)) 0) (<= (+ m (* 768 (div (+ (- 2) (div n 256)) 3)) 513 (* 256 (div n 128))) 0) (<= (+ m (* 128 (div (+ m (- 128)) 256)) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ (div (+ n (- 128)) 256) (* 2 (div n 256))) 0) (<= (+ m (* (div (+ m (* 128 (div (+ n (- 128)) 256))) 256) 512) 129) 0) (<= (+ m (* 768 (div (+ (- 2) (div n 256)) 3)) 513 (* 256 (div n 256))) 0) (<= (+ (* 5 (div n 128)) 3 (* (div (+ m (- 128)) 256) 4)) 0) (<= (+ (* 2 (div (+ m (* 256 (div (+ n (- 128)) 256))) 512)) 2 (div (+ n (- 128)) 256)) 0) (<= (+ (div n 256) (div (+ n (- 128)) 256) (div m 128) 1) 0) (<= (+ m (* 768 (div (+ m (- 128)) 256)) 513 (* (div n 256) 1024)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div (+ m (* 128 (div n 128)) (- 128)) 256)) 385) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* 256 (div (+ m (- 256)) 512)) 385) 0) (<= (+ m (* 128 (div n 128)) 129 (* 256 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (- 512)) 1024) 512)) 0) (<= (+ m (* 256 (div n 256)) (* 256 (div n 128))) 127) (<= (+ m (* 768 (div n 256)) (* 256 (div n 128))) 255) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) 512)) 0) (<= (+ m 513 (* 256 (div n 256)) (* 768 (div (+ m (- 384)) 768))) 0) (<= (+ (* (div (+ m (* (div n 256) 128) (- 128)) 384) 512) m (* 256 (div n 256)) 385) 0) (<= (+ m (* 256 (div n 256)) 385 (* (div (+ m (* 256 (div (+ n (- 128)) 256))) 512) 512)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (- 128)) 256) 512) (* (div n 128) 512)) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) (* 256 (div (+ n (- 128)) 256)) 385) 0) (<= (+ (* 256 (div (+ m (* 128 (div n 128)) (- 128)) 256)) n 129) 0) (<= (+ m (* 256 (div n 256)) 129 (* (div (+ (- 1) (div (+ n (- 128)) 256)) 2) 256)) 0) (<= (+ 257 m (* 768 (div (+ m (- 128)) 256))) 0) (<= (+ 2 (* 2 (div (+ n (- 128)) 256)) (div m 128)) 0) (<= (+ m 129 (* (div (+ m (- 256) (* 256 (div n 128))) 512) 512)) 0) (<= (+ m (* (div n 256) 512) (* (div m 128) 512) (* 256 (div n 128))) 127) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 513 (* (div (+ m (* 128 (div (+ n (- 128)) 256))) 256) 512)) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* (div n 256) 128) 129 (* 256 (div (+ m 128) 256))) 0) (<= (+ (div n 128) (* (div (+ n (- 128)) 256) 4)) 1) (<= (+ m (* 256 (div n 256)) (* 256 (div m 128))) 255) (<= (+ (div n 256) 3 (* (div (+ m (* (div n 256) 128) (- 128)) 384) 4)) 0) (<= (+ m 129 (* (div (+ m (* 256 (div n 256)) (- 128)) 512) 512)) 0) (<= (+ (* 256 (div (+ (- 2) (div n 256)) 3)) m (* (div n 256) 128) 129) 0) (<= (+ m (* 256 (div (+ m (- 128)) 256)) (* 256 (div n 256)) 129 (* 256 (div n 128))) 0) (<= (+ (* 3 (div n 128)) 3 (* 3 (div (+ m (- 128)) 256)) (div (+ n (- 128)) 256)) 0) (<= (+ (* 256 (div (+ (- 2) (div n 256)) 3)) m (* 256 (div n 256)) 129) 0) (<= (+ 3 (div n 128) (* (div (+ m (- 256) (* 256 (div n 128))) 512) 4)) 0) (<= (+ m (* 768 (div n 256))) 127) (<= (+ 257 n (* (div (+ m (- 256) (* 256 (div n 128))) 512) 512)) 0) (<= (+ (div n 256) (div (+ m (- 128)) 256) 1) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) 129 (* 128 (div m 128))) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div n 256)) (* 256 (div m 128))) 127) (<= (+ m (* (div (+ m (* 256 (div n 256)) (- 128)) 512) 512) 385 (* 256 (div n 128))) 0) (<= (+ m (* 256 (div (+ n (- 128)) 256)) (* (div n 256) 128) (* 256 (div m 128)) 129) 0) (<= (+ (* 256 (div (+ n (- 128)) 256)) n 129 (* 256 (div (+ m 128) 256))) 0) (<= (+ (* 2 (div (+ m (* 256 (div n 256)) (- 128)) 512)) 2 (div (+ n (- 128)) 256)) 0) (<= (+ m (* (div (+ m (- 384)) 768) 512) (* 256 (div (+ n (- 128)) 256)) 513) 0) (<= (+ m (* 256 (div (+ m (- 256)) 512)) 1) 0) (<= (+ m (* 128 (div (+ m (* 128 (div (+ n (- 128)) 256))) 256)) 129 (* 128 (div (+ n (- 128)) 256))) 0) (<= (+ 257 (* (div n 256) 512) (* (div (+ m (- 128)) 256) 512) n) 0) (<= (+ 257 (* (div (+ m (- 256)) 512) 512) n) 0) (<= (+ (* 2 (div (+ m (- 384)) 768)) 2 (div n 128)) 0) (<= (+ (* 256 (div (+ m (- 256) (* 256 (div n 256))) 768)) m (* 256 (div n 256)) 129) 0) (<= (+ m (* 128 (div n 128)) (* 256 (div (+ m (- 128)) 256)) 129) 0) (<= (+ m (* (div n 128) 1024) (* 768 (div (+ m (- 128)) 256)) 513) 0) (<= (+ m 513 (* (div (+ m (* 128 (div n 128)) (- 128)) 256) 768) (* 256 (div n 128))) 0) (<= (+ (* 256 (div (+ (- 2) (div n 256)) 3)) m 129 (* 256 (div n 128))) 0) (<= (+ m (* 256 (div n 256)) (* (div (+ m (- 128)) 256) 512) 385 (* (div n 128) 512)) 0) (<= (+ m (* (div n 256) 128) 129 (* 256 (div (+ m (* 256 (div n 256)) (- 128)) 512))) 0))";
		final String expectedResultAsString = null;
		SimplificationTest.runSimplificationTest(funDecls, formulaAsString, expectedResultAsString, SIMPLIFICATION_TECHNIQUE, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void benchmark03() {
		final FunDecl[] funDecls = new FunDecl[] {
			new FunDecl(QuantifierEliminationTest::getArrayIntIntIntSort, "#memory_int"),
			new FunDecl(SmtSortUtils::getIntSort, "ULTIMATE.start_main_~#array~0#1.base", "~ARR_SIZE~0", "ULTIMATE.start_main_~row~0#1", "ULTIMATE.start_assume_abort_if_not_~cond#1", "ULTIMATE.start_main_~#array~0#1.offset", "ULTIMATE.start_main_~sum~0#1", "ULTIMATE.start_main_~column~0#1", "ULTIMATE.start_diff_~idx1#1", "ULTIMATE.start_diff_~idx2#1"),
		};
		final String formulaAsString = "(and (or (and (= |ULTIMATE.start_assume_abort_if_not_~cond#1| 1) (< 0 ~ARR_SIZE~0)) (and (<= ~ARR_SIZE~0 0) (= |ULTIMATE.start_assume_abort_if_not_~cond#1| 0))) (< 0 ~ARR_SIZE~0) (or (and (or (< 32767 (mod |ULTIMATE.start_main_~column~0#1| 65536)) (and (or (< (* ~ARR_SIZE~0 ~ARR_SIZE~0 ~ARR_SIZE~0) (+ (* 3 |ULTIMATE.start_main_~sum~0#1|) ~ARR_SIZE~0 1)) (< (mod |ULTIMATE.start_main_~column~0#1| 65536) (mod |ULTIMATE.start_main_~row~0#1| 65536))) (or (= 0 (+ (* |ULTIMATE.start_main_~row~0#1| ~ARR_SIZE~0) |ULTIMATE.start_main_~column~0#1|)) (< (mod |ULTIMATE.start_main_~column~0#1| 65536) (mod |ULTIMATE.start_main_~row~0#1| 65536))) (or (< (mod |ULTIMATE.start_main_~column~0#1| 65536) (mod |ULTIMATE.start_main_~row~0#1| 65536)) (< (+ (* 3 (mod |ULTIMATE.start_main_~column~0#1| 65536)) (* 3 |ULTIMATE.start_main_~sum~0#1|) ~ARR_SIZE~0) (+ (* ~ARR_SIZE~0 ~ARR_SIZE~0 ~ARR_SIZE~0) (* 3 (mod |ULTIMATE.start_main_~row~0#1| 65536)) 1))) (<= (mod |ULTIMATE.start_main_~row~0#1| 65536) 32767))) (or (and (or (< (* ~ARR_SIZE~0 ~ARR_SIZE~0 ~ARR_SIZE~0) (+ (* 3 |ULTIMATE.start_main_~sum~0#1|) ~ARR_SIZE~0 1)) (< (mod |ULTIMATE.start_main_~column~0#1| 65536) (mod |ULTIMATE.start_main_~row~0#1| 65536))) (or (= 0 (+ (* |ULTIMATE.start_main_~row~0#1| ~ARR_SIZE~0) |ULTIMATE.start_main_~column~0#1|)) (< (mod |ULTIMATE.start_main_~column~0#1| 65536) (mod |ULTIMATE.start_main_~row~0#1| 65536))) (or (< (mod |ULTIMATE.start_main_~column~0#1| 65536) (mod |ULTIMATE.start_main_~row~0#1| 65536)) (< (+ (* 3 (mod |ULTIMATE.start_main_~column~0#1| 65536)) (* 3 |ULTIMATE.start_main_~sum~0#1|) ~ARR_SIZE~0) (+ (* ~ARR_SIZE~0 ~ARR_SIZE~0 ~ARR_SIZE~0) (* 3 (mod |ULTIMATE.start_main_~row~0#1| 65536)) 1)))) (<= (mod |ULTIMATE.start_main_~row~0#1| 65536) 32767))) (< (+ |ULTIMATE.start_main_~column~0#1| 1) ~ARR_SIZE~0)) (or (= (* ~ARR_SIZE~0 ~ARR_SIZE~0 ~ARR_SIZE~0) (+ (* (select (select |#memory_int| |ULTIMATE.start_main_~#array~0#1.base|) |ULTIMATE.start_main_~#array~0#1.offset|) 3) (* 3 |ULTIMATE.start_main_~sum~0#1|) ~ARR_SIZE~0)) (< |ULTIMATE.start_main_~column~0#1| ~ARR_SIZE~0)) (or (<= ~ARR_SIZE~0 |ULTIMATE.start_main_~row~0#1|) (and (or (< 0 (mod |ULTIMATE.start_main_~row~0#1| 65536)) (< (+ (* 3 |ULTIMATE.start_main_~sum~0#1|) ~ARR_SIZE~0) (+ (* ~ARR_SIZE~0 ~ARR_SIZE~0 ~ARR_SIZE~0) (* 3 (mod |ULTIMATE.start_main_~row~0#1| 65536)) 1))) (or (< (* ~ARR_SIZE~0 ~ARR_SIZE~0 ~ARR_SIZE~0) (+ (* 3 |ULTIMATE.start_main_~sum~0#1|) ~ARR_SIZE~0 1)) (< 0 (mod |ULTIMATE.start_main_~row~0#1| 65536))) (or (< 0 (mod |ULTIMATE.start_main_~row~0#1| 65536)) (= (* |ULTIMATE.start_main_~row~0#1| ~ARR_SIZE~0) 0)) (<= (mod |ULTIMATE.start_main_~row~0#1| 65536) 32767)) (< 1 ~ARR_SIZE~0)) (or (< |ULTIMATE.start_diff_~idx2#1| |ULTIMATE.start_diff_~idx1#1|) (and (= (+ (* |ULTIMATE.start_diff_~idx2#1| 3) (* 3 |ULTIMATE.start_main_~sum~0#1|) ~ARR_SIZE~0) (+ (* ~ARR_SIZE~0 ~ARR_SIZE~0 ~ARR_SIZE~0) (* |ULTIMATE.start_diff_~idx1#1| 3))) (= 0 (+ (* |ULTIMATE.start_main_~row~0#1| ~ARR_SIZE~0) |ULTIMATE.start_main_~column~0#1|))) (< (+ |ULTIMATE.start_main_~column~0#1| 1) ~ARR_SIZE~0)))";		final String expectedResultAsString = null;
		SimplificationTest.runSimplificationTest(funDecls, formulaAsString, expectedResultAsString, SIMPLIFICATION_TECHNIQUE, mServices, mLogger, mMgdScript, mCsvWriter);
	}


}

RabinAutomaton multiInitialAutomaton = (
	alphabet = {a b},
	states = {s1 s2 s3},
	initialStates = {s1 s2},
	acceptingStates = {s3},
	finiteStates = {},
	transitions = { (s1 a s2) (s2 a s3) (s1 a s3) (s3 b s2) (s3 a s1)}
);

RabinAutomaton acceptorAutomaton = (
	alphabet = {a b c},
	states = {s1},
	initialStates = {s1},
	acceptingStates = {s1},
	finiteStates = {},
	transitions = { (s1 a s1) (s1 b s1) (s1 c s1) }
);

RabinAutomaton rejectingAutomaton = (
	alphabet = {a b},
	states = {s1 s2},
	initialStates = {s1},
	acceptingStates = {s2},
	finiteStates = {s2},
	transitions = { (s1 a s2) (s1 a s1) (s1 b s1) (s2 a s2) (s2 b s2) }
);


assert(!buchiIsEmpty(rabin2BuchiOperation(multiInitialAutomaton)));
assert(!isEmpty(buchi2RabinOperation(rabin2BuchiOperation(multiInitialAutomaton))));

assert(!buchiIsEmpty(rabin2BuchiOperation(acceptorAutomaton)));
assert(!isEmpty(buchi2RabinOperation(rabin2BuchiOperation(acceptorAutomaton))));

assert(buchiIsEmpty(rabin2BuchiOperation(rejectingAutomaton)));
assert(isEmpty(buchi2RabinOperation(rabin2BuchiOperation(rejectingAutomaton))));


assert(buchiAccepts(rabin2BuchiOperation(multiInitialAutomaton), [a a b , a b]));
assert(!buchiAccepts(rabin2BuchiOperation(multiInitialAutomaton), [, a a b]));
assert(buchiAccepts(rabin2BuchiOperation(multiInitialAutomaton), [a a, b a a a a]));

assert(!buchiAccepts(rabin2BuchiOperation(rejectingAutomaton), [a a, a b]));
assert(!buchiAccepts(rabin2BuchiOperation(rejectingAutomaton), [a a a a a a a a a b , a b]));
assert(!buchiAccepts(rabin2BuchiOperation(rejectingAutomaton), [, a b]));
assert(!buchiAccepts(rabin2BuchiOperation(rejectingAutomaton), [, b a]));
assert(!buchiAccepts(rabin2BuchiOperation(rejectingAutomaton), [, a b]));

assert(buchiAccepts(rabin2BuchiOperation(acceptorAutomaton), [a a b , a b]));
assert(buchiAccepts(rabin2BuchiOperation(acceptorAutomaton), [, a a b]));
